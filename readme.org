#+title: scsh - scala for shell scripts

Scala can be used for scripting and scsh wants to make this more
convenient: allowing to share code between scripts and make third
party libraries available.

It produces a jar file that can be used to run scala scripts. You can
add libraries to this jar and custom utilities that are then available
in your scala scripts. There is a simple shell script provided
intended to be used in the shebang of your scala scripts:

#+begin_src scala
#!/usr/bin/env scsh
println("Hello world!")
#+end_src

It borrows ideas from [[http://www.crosson.org/2012/01/simplifying-scala-scripts-adding.html][here]] and [[https://github.com/stanislas/crsh-template][here]]. Currently this targets linux like
systems only.

* Installation

Since everybody probably has its own utilities to add, clone this repo
and build everything (using [[http://scala-sbt.org][sbt]]) with

#+begin_src shell
sbt gen-scsh
#+end_src

Then symlink the resulting shell script in =target/bin/scsh= to a
location that is in your =PATH= (or add this directory to =PATH=).

Now you can start scala scripting using the =/usr/bin/env scsh=
shebang.

The =build.sbt= file contains few keys that control the shell script
generation:

- shebang in scsh := "/bin/sh" :: The full path to a system shell.
- javaBin in scsh := "java" :: The full path to the java
     executable. The default is =java=. You can also try [[https://github.com/ninjudd/drip][drip]] that
     optimizes startup time.
- javaOptions in scsh := Seq() :: Additional java options or system
     properties that are passed to the jvm running the scripts. The
     environment variable =SCSH_OPTS= can be used to specify options
     to a specific run. It overrides those from this key.

If you call =scsh= without a script, a scala repl is started pimped
with all the libraries and utility code of this project.

When you have another utility or need more dependencies from your
scripts, simply add it to the project and run =sbt scsh= again. This
updates the script and jar file.

* Usage

Simply create a file with this first line ~#!/usr/bin/env scsh~ and
write scala code beneath. Make the file executable to run it:

#+begin_src shell
#!/usr/bin/env scsh

println("Hello " + args.toList.mkString(" "))
#+end_src

This is then a normal scala script. The arguments are bound to the
name ~args~ which is in scope. You can also create an ~object~ with a
main method. See [[http://www.scala-lang.org/documentation/getting-started.html#script_it][this short example]]. The above only makes the shell
preamble easier and could be written like this:

#+begin_src shell
#!/bin/sh
exec scala -nocompdaemon -savecompiled -usejavacp -deprecation "$0" "$@"
!#

println("Hello " + args.toList.mkString(" "))
#+end_src

If you like other options, change it in [[./src/main/scala/scsh/boot.scala][boot.scala]].

* What it contains

These are the libraries and utility code packaged up in the jar that
runs the scripts. If you find something useful is missing, please open
a pull request or an issue.

** Libraries

- [[https://github.com/pathikrit/better-files][better-files]] makes working with files in java and scala much nicer
- [[https://github.com/scala/scala-swing][scala-swing]] scala wrapper for swing
- [[https://github.com/typesafehub/scala-logging][scala-logging]] and [[http://logback.qos.ch][logback]] for logging
- [[https://github.com/scopt/scopt][scopt]] a command line parser
- [[https://github.com/xerial/sqlite-jdbc][sqlite-jdbc]] jdbc driver for [[http://www.sqlite.org][sqlite]] databases
- [[https://github.com/tototoshi/scala-csv][scala-csv]] a library for working with csv files
- [[https://github.com/typesafehub/config][typesafe's config]] a configuration library

** code

*** more file utils

The =better-files= library provides a great api for working with
files. These utilities add more helpers to the ~File~ type that are
convenient in scripts. Declare the following imports:

#+begin_src scala
import better.files._
import scsh.files._
#+end_src

Some examples follow:

#+begin_src scala
File("a.Txt").hasExtensions(Set("txt", "md")) == true
#+end_src

~hasExtensions~ checks whether the file's extension is a member of the
given set. The comparison is case-insensitive.

#+begin_src scala
File("a/b/c.txt").mapFileName("ab" + _) // -> "a/b/abc.txt"
File("a/b/c.txt").mapBaseName(_ + "de") // -> "a/b/cde.txt"
File("a/b/c.txt").mapExtension(_ => "md") // -> "a/b/c.md"
#+end_src

The ~mapXyz~ methods resolve siblings of the file based on the name or
a part thereof. The source file is not checked for existance or which
type it is and it is not changed, either (i.e. it is not renamed).

#+begin_src scala
import scsh.files.FileCheck._

File("a/b.txt").assert(missing)
File("/etc").assert(directory)
File("/etc/passwd").assert(writeable & readable)
#+end_src

The ~FileCheck~ trait is for checking certain properties of a
file. There are some defined in its companion. The ~File#assert~
method takes such a check and throws an exception, if the file doesn't
pass. This is handy to quickly verify an input or output file. The
~FileCheck~ trait additionally has an error message which is returned
with the exception.

*** bulk file operations

I often do certain operations on one or more files. The
~scsh.bulkfile~ package provides some templates to ease writing
scripts that transform files.

For example, the next script renames files such that their base
name ends with the timestamp of its last modification time.

#+begin_src scala
#!/usr/bin/env scsh

import java.time._
import java.time.format._
import better.files._
import scsh.files._
import scsh.bulkfile._

case class Config(
  params: Params = Params(),
  pattern: String = "yyyy-MM-dd"
) extends BulkFileConfig {
  lazy val formatter = DateTimeFormatter.ofPattern(pattern)
}

object rename extends FileTransform[Config] {
  val parser = new BulkFileParser[Config]("rename") {
    head("rename", "1.0")
    opt[String]("pattern") optional() action {
      (x, c) => c.copy(pattern = x)
    } text ("The date time pattern to use.")

    addBaseOptions()

    def update(cfg: Config, p: Params) =
      cfg.copy(params = p)
  }

  def transform(cfg: Config)(in: File): File = {
    val lastmod = in.lastModifiedTime.atZone(ZoneId.systemDefault)
    val out = in.mapBaseName(n => s"${n}_${cfg.formatter.format(lastmod)}")
    logLine(s"Move ${in.path} -> ${out.path}")
    if (!cfg.params.dry)
      in.moveTo(out)
    out
  }
}
rename.main(args, Config())
#+end_src

At first the ~Config~ case class contains the user input. It must
extend ~BulkFileConfig~ which declares a ~params~ field. Then the main
object extends ~FileTransform~ and defines the ~scopt.OptionParser~
and the transformation method. The parser should extend
~BulkFileParser~ so the ~addBaseOptions~ method is provided that adds
all standard options and arguments. We only additionally need an
option for the date/time pattern. See [[https://github.com/scopt/scopt][scopt]] project for more
information. The ~update~ method is necessary to let the base options
update the config.

Save this in a file =rename= and execute it:

#+begin_src
$ ./rename --help
rename 1.0
Usage: rename [options] input

  --pattern <value>
        The date time pattern to use.
  --regex <value>
        Use a regex to convert all matched files. The <input> argument must
        then be a directory and all files are scanned recursively. `regex' is
        matched against the complete path name of each file.
  --glob <value>
        Use a glob to convert all matched files. The <input> argument must
        then be a directory and all files are scanned recursively. `glob' is
        matched against the complete path name of each file.
  -p | --parallel
        Execute the transformation on all files in parallel
  --dry
        Do not execute the transformation, but show what would happen.
  --help
        prints this usage text
  --version
        prints version information and exits
  input
        The input file to convert. It must be a directory if `--regex'
        is specified.
#+end_src

The ~BulkFileParser~ defines some options, including =help= and
=version=. As you can see from the help text, the script can rename a
single file or a tree. If the script is applied to a tree, a regex or
glob must be given to select files from it.

Here is an example (dry) run:

#+begin_example
$ rename --dry --regex '(?i).*.flac' /tmp/testdir
Transform files in /tmp/testdir matching `(?i).*.flac':
/tmp/testdir/07-Just Before-Chad Lawson.flac
/tmp/testdir/09-Ave Maria-Chad Lawson.flac
/tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson.flac
/tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson.flac
/tmp/testdir/06-I Wish I Knew-Chad Lawson.flac
...
Continue (y/n)? y
Move /tmp/testdir/07-Just Before-Chad Lawson.flac -> /tmp/testdir/07-Just Before-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/09-Ave Maria-Chad Lawson.flac -> /tmp/testdir/09-Ave Maria-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson.flac -> /tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson.flac -> /tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/06-I Wish I Knew-Chad Lawson.flac -> /tmp/testdir/06-I Wish I Knew-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/03-Falling Together-Chad Lawson.flac -> /tmp/testdir/03-Falling Together-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/02-Heart in Hand-Chad Lawson.flac -> /tmp/testdir/02-Heart in Hand-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/04-A Love Is Born-Chad Lawson.flac -> /tmp/testdir/04-A Love Is Born-Chad Lawson_2015-12-07.flac
Move /tmp/testdir/08-Father Abraham-Chad Lawson.flac -> /tmp/testdir/08-Father Abraham-Chad Lawson_2015-12-07.flac
#+end_example

There is another template trait, ~FileTransformProcess~ that helps
using external commands on files. Again, a parser must be specified
for additional options/arguments. Then specify a method to create the
output filename and the external command to execute. For example,
encoding audio files using =oggenc=:

#+begin_src scala
#!/usr/bin/env scsh

import better.files._
import scsh.files._
import scsh.bulkfile._

case class Config(
  params: Params = Params(),
  quality: Int = 5) extends BulkFileConfig

object encode extends FileTransformProcess[Config] {
  val parser = new BulkFileParser[Config]("encode") {
    head("encode", "1.0")
    opt[Int]('q', "quality") optional() action { (x, c) =>
      c.copy(quality = x)
    } text ("The quality, something between -1 (low) and 10 (high)")

    addBaseOptions()

    def update(cfg: Config, p: Params) = cfg.copy(params = p)
  }

  def makeOutFile(in: File, cfg: Config): File =
    in.mapExtension(_ => "ogg")

  def makeCommand(in: File, out: File, cfg: Config): Cmd =
    Cmd("oggenc") ~ in ~ "-q" ~ cfg.quality ~ "-o" ~ out
}
encode.main(args, Config())
#+end_src

The ~Cmd~ class provides some type safety when specifying the external
command and its arguments. For each argument type there must be a
corresponding ~A ⇒ Option[String]~ converter in scope. Arguments are
concatenated using =~=. Executing this script looks like this:

#+begin_example
▶ ./src/test/scripts/encode --dry --glob '**.flac' /tmp/testdir
Transform files in /tmp/testdir matching `**.flac':
/tmp/testdir/07-Just Before-Chad Lawson.flac
/tmp/testdir/09-Ave Maria-Chad Lawson.flac
/tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson.flac
/tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson.flac
/tmp/testdir/06-I Wish I Knew-Chad Lawson.flac
...
Continue (y/n)? y
Transform (dry) /tmp/testdir/07-Just Before-Chad Lawson.flac => /tmp/testdir/07-Just Before-Chad Lawson.ogg
oggenc /tmp/testdir/07-Just Before-Chad Lawson.flac -q 5 -o /tmp/testdir/07-Just Before-Chad Lawson.ogg
Transform (dry) /tmp/testdir/09-Ave Maria-Chad Lawson.flac => /tmp/testdir/09-Ave Maria-Chad Lawson.ogg
oggenc /tmp/testdir/09-Ave Maria-Chad Lawson.flac -q 5 -o /tmp/testdir/09-Ave Maria-Chad Lawson.ogg
Transform (dry) /tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson.flac => /tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson.ogg
oggenc /tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson.flac -q 5 -o /tmp/testdir/05-Loves me Loves me not Loves me-Chad Lawson.ogg
Transform (dry) /tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson.flac => /tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson.ogg
oggenc /tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson.flac -q 5 -o /tmp/testdir/01-I Know a Love So True and Fair-Chad Lawson.ogg
Transform (dry) /tmp/testdir/06-I Wish I Knew-Chad Lawson.flac => /tmp/testdir/06-I Wish I Knew-Chad Lawson.ogg
oggenc /tmp/testdir/06-I Wish I Knew-Chad Lawson.flac -q 5 -o /tmp/testdir/06-I Wish I Knew-Chad Lawson.ogg
Transform (dry) /tmp/testdir/03-Falling Together-Chad Lawson.flac => /tmp/testdir/03-Falling Together-Chad Lawson.ogg
oggenc /tmp/testdir/03-Falling Together-Chad Lawson.flac -q 5 -o /tmp/testdir/03-Falling Together-Chad Lawson.ogg
Transform (dry) /tmp/testdir/02-Heart in Hand-Chad Lawson.flac => /tmp/testdir/02-Heart in Hand-Chad Lawson.ogg
oggenc /tmp/testdir/02-Heart in Hand-Chad Lawson.flac -q 5 -o /tmp/testdir/02-Heart in Hand-Chad Lawson.ogg
Transform (dry) /tmp/testdir/04-A Love Is Born-Chad Lawson.flac => /tmp/testdir/04-A Love Is Born-Chad Lawson.ogg
oggenc /tmp/testdir/04-A Love Is Born-Chad Lawson.flac -q 5 -o /tmp/testdir/04-A Love Is Born-Chad Lawson.ogg
Transform (dry) /tmp/testdir/08-Father Abraham-Chad Lawson.flac => /tmp/testdir/08-Father Abraham-Chad Lawson.ogg
oggenc /tmp/testdir/08-Father Abraham-Chad Lawson.flac -q 5 -o /tmp/testdir/08-Father Abraham-Chad Lawson.ogg
#+end_example

With =--dry= the command is printed to stdout, otherwise it is executed.
